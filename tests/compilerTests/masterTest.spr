function println(s: string) {
    putString(s);
    putChar('\n');
};

function println(x: integer) {
    putInt(x);
    putChar('\n');
};

function println() {
    putChar('\n');
};

function multiply(x: integer, y:integer) {
    return x*y;
};

function square(x: integer) {
    return multiply(x,x);
};

function factorial(x: integer) {
    result: integer := 1;

    constant MAXINPUT: integer := 12;

    if(x > MAXINPUT) {
        putString("Overflow: cannot take factorial of ");
        putInt(x);
        putString(". Returning -1 instead.");
        result := -result; // Geef maar -1 terug...
    } else {
        while(x>1) {
            result := result * x;
            x := x-1;
        }
    }

    return result;
};

function powMod(base: integer, exp: integer, mod: integer) {
    result: integer := 1;

    base := base % mod;

    if(base = 0) {
        result := 0;
    }
    else {
        if(base = 1) {
            result := 1;
        } else {
            while(exp > 0) {
                if(exp%2 = 1) {
                    result := result*base % mod;
                    exp := exp - 1;
                }
                exp := exp / 2;
                base := square(base) % mod;
            }
        }
    }

    return result;
};

function printResults(expected: integer, real: integer, calculation: string) {
    putString(calculation);
    putString(" = ");
    putInt(real);

    if (expected = real) {
        putString("  (success)\n");
    } else {
        putString(", but expected ");
        putInt(expected);
        println();
    }
};

printResults(1, powMod(1, 10, 20), "powMod(1, 10, 20)");
printResults(977, powMod(22137, 345345, 20780), "powMod(22137, 345345, 20780)");

printResults(3628800, factorial(10), "10!");
printResults(39916800, factorial(11), "11!");
printResults(479001600, factorial(12), "12!");

{
    // Jup; we allow string comparisons
    constant TRUE: boolean := ("Hello, world!" = "Hello, world!");
    constant FALSE: boolean := !TRUE;

    {   // Wonderland
        constant TRUE: boolean := FALSE;
        constant FALSE: boolean := TRUE; // We set TRUE := FALSE, thus when setting FALSE := TRUE, we change nothing...

        if(TRUE = FALSE) {
            println("Success! Magic happened!");
        }
    }
}

{
    // Yeah... functions can be hidden!
    function getTrue() {
        return true;
    };

    {
        // This one hides the previous one...
        function getTrue() {
            return false;
        };

        if(getTrue()) {
            putString("FAIL: getTrue() { return true; } was not hidden");
        }
    }

    if(! getTrue()) {
        putString("FAIL: getTrue() { return false; } is still visible");
    }
}
