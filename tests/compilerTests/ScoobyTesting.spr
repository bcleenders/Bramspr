/*
    First, define some functions that we want to use later on in the program (library-like)
*/
function println()                  { putChar('\n');                 };
function println(toPrint: string)   { putString(toPrint); println(); };
function println(toPrint: integer)  { putInt(toPrint);    println(); };
function println(toPrint: character){ putChar(toPrint);   println(); };
function println(toPrint: boolean)  { putBool(toPrint);   println(); };

/*
    Define the Scooby test functions
*/
errorCount: integer := 0;
testCount: integer := 0;

function test(encountered: integer, expected: integer, description: string) {
    if(expected =/= encountered) {
        errorCount := errorCount + 1;
        println(description);
        putString("   Expected: "); putInt(expected);
        putString(", but encountered: "); putInt(encountered);
        println();
    }
    testCount := testCount + 1;
};

function test(encountered: character, expected: character, description: string) {
    if(expected =/= encountered) {
        errorCount := errorCount + 1;
        println(description);
        putString("   Expected: "); putChar(expected);
        putString(", but encountered: "); putChar(encountered);
        println();
    }
    testCount := testCount + 1;
};

function test(encountered: boolean, expected: boolean, description: string) {
    if(expected =/= encountered) {
        errorCount := errorCount + 1;
        println(description);
        putString("   Expected: "); putBool(expected);
        putString(", but encountered: "); putBool(encountered);
        println();
    }
    testCount := testCount + 1;
};

function test(encountered: string, expected: string, description: string) {
    if(expected =/= encountered) {
        errorCount := errorCount + 1;
        println(description);
        putString("   Expected: "); putString(expected);
        putString(", but encountered: "); putString(encountered);
        println();
    }
    testCount := testCount + 1;
};

function end() {
    putString("Tests executed: "); println(testCount);
    putString("Fail-O-Meter: "); println(errorCount);

    if (errorCount = 0) {
        println("Nice work Scoob!");
    }
    if (0 < errorCount < 5) {
        println("No Shaggy, we're going to Solve this mystery!");
    }
    if (5 <= errorCount) {
        println("This place makes me so nervous, all I can think of is food!");
    }
};

/*
    The framework and helper functions are now defined.
    Open a new scope, to let the user hide whatever he/she 
    wants without name-collisioning with the functions/variables above.
*/
{

    {   // Mathematics
        test(1+1, 2, "1+1 = 2");
        test(2^0, 1, "2^0 = 1");
        test(2^3, 8, "2^3 = 8");
        test(4^3^2, 262144, "4^3^2 = 4^(3^2)");
        test((4^3)^2, 4096, "(4^3)^2");
        test(10^10^10, 2147483647, "Googleplex is replaced by 2^31-1");
    }

    {   // Logic
        test(true | false, true, "true | false = true");

        x: integer := 1000;
        y: integer := 1000000;
        { // < operator
            test(1 < 2, true, "1 < 2");
            test(2 < 1, false, "2 < 1");
            test(1 < 2 < (2^3) < 1000, true, "1 < 2 < (2^3) < 1000");
            test(1 < 2 < (2^3) < x < x+1, true, "1 < 2 < (2^3) < x + 1");
            test(10 < 2 < 2^3 < x, false, "10 < 2 < 2^3 < x");
            test(1 < 2 < 3 < 4 < 5 < 6 < 7, true, "1 < 2 < 3 < 4 < 5 < 6 < 7");
        }
        { // <= operator
            test(1 <= 2, true, "1 <= 2");
            test(2 <= 1, false, "2 <= 1");
            test(1 <= 2 <= (2^3) <= 1000, true, "1 <= 2 <= (2^3) <= 1000");
            test(1 <= 2 <= (2^3) <= x <= x+1, true, "1 <= 2 <= (2^3) <= x + 1");
            test(10 <= 2 <= 2^3 <= x, false, "10 <= 2 <= 2^3 <= x");
            test(1 <= 2 <= 3 <= 4 <= 5 <= 6 <= 7, true, "1 <= 2 <= 3 <= 4 <= 5 <= 6 <= 7");

            test(1 <= 4 <= 4 <= 10, true, "1 <= 4 <= 4 <= 10");
            test(1 <= 1 <= 4 <= 10, true, "1 <= 1 <= 4 <= 10");
            test(1 <= 4 <= 4 <= 10 <= 2, false, "1 <= 4 <= 4 <= 10 <= 2");
        }
    }


    { // Assignments and stuff
        x, y, z: integer;
        z := y := (x:= 5) * 10; // = 15
        test(x, 5, "x, after 'z := y := (x:= 5) * 10;'");
        test(y, 50, "y, after 'z := y := (x:= 5) * 10;'");
        test(z, 50, "z, after 'z := y := (x:= 5) * 10;'");

        constant X: integer := 123;
        constant MAXINT: integer := 2147483647; // 2^31 - 1

        test(2^30 - 1 + 2^30, MAXINT, "MAXINT");
    }

    {   // More complicated testing; lazy evaluation!
        isExecuted: boolean := false;
        function setTrue() { isExecuted := true; return 100; };

        // Dump data to this variable
        sinkhole: boolean;

        // This should execute lazy; setTrue should not be called.
        sinkhole := 1 < 10 < 2 < setTrue();
        test(isExecuted, false, "'1 < 10 < 2 < setTrue()' was not lazy evaluated");

        // reset
        isExecuted := false;
        sinkhole := 1 < 10 < setTrue() < 10000 < 10;
        test(isExecuted, true, "setTrue() was not evaluated (but should hav been)");
    }
}

// Let's round it up:
end();