{
    putString("*** Testing simple expressions & variables ***\n");
    x: integer;
    y: integer;
    z: boolean;
    c: character;
    s: string;
    s1: string;
    s2: string;

    putString("This should be empty: '");
    putString(s);
    putString("' (between the '')\n");

    x := 10 + 20 + x;           // 30
    y := 20 + x + x;            // 80
    z := true | false;          // true
    c := 'a';                   // 'a'
    s := "Hello, world!\n";     // "Hello, world!"
    s1 := "bar";
    s2 := "foo";

    putString("x = "); putInt(x); putString(" = 30\n");
    x <> y;                     // y=30     x=80
    putString("x = "); putInt(x); putString(" = 80\n");

    putBool(true & false); putString(" = false\n");

    putBool(true | false); putString(" = true\n");

    putInt(2^5); putString(" = 32\n");

    putBool(5 <= 4 <= 6 <= 2); putString(" = false\n");

    putBool(1 <= 2 <= 2 <= 3); putString(" = true\n");

    putBool(1 <= 2 <= 4 <= 3); putString(" = false\n");

    x := x + y;

    putInt(x);
    putString(" = 110\n");

    putString(s);

    putString(s1); putChar(' '); putString(s2); putString("\n");
    s1 <> s2;
    putString(s1); putChar(' '); putString(s2); putString("\n");

    putString("\n");
}

{
    putString("*** Testing instantiating declarations ***");
    x: integer := 10;

    putInt(x); putString(" = 10\n");

    i,j: integer := x;
    putInt(i);
    putString(", ");
    putInt(j);
    putString(" = 10, 10\n");
}

{
    putString("*** Testing fancy assignments ***\n");
    w, x, y, z: integer;

    w := (x := y := (z := 10 * 2) + 1)*2;
    putInt(w); putString(" = w = 42\n");
    putInt(x); putString(" = x = 21\n");
    putInt(y); putString(" = y = 21\n");
    putInt(z); putString(" = z = 20\n");
}

{   putString("*** Testing if/else structure **\n");

    if(1 <= 2) {
        putString("this works (1)!\n");
    }
    else{
        putString("BROKEN (1)!\n");
    }

    if(4 <= 2) {
        putString("BROKEN (2)!\n");
    }
    else{
        putString("this works (2)!\n");
    }

    if(2 <= 4) {
        putString("this works (3)!\n");
    }

    if(4 <= 2) {
        putString("BROKEN (3)!\n");
    }
}

{
    putString("*** Testing enums ***\n");
    enumeration day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY };
    d : day;
    d := enumeration.day.MONDAY;
    d := enumeration.day.TUESDAY;
    d := enumeration.day.WEDNESDAY;
    d := day.THURSDAY;

    monday: day := day.MONDAY;
    wednesday: day := day.WEDNESDAY;
    monday2: day := day.MONDAY;

    // if(monday =/= wednesday) {
    //     putString("Success: monday is not wednesday!");
    // } else {
    //     putString("FAIL: monday = wednesday");
    // }

    // if(monday = monday2) {
    //     putString("Success: monday is monday!");
    // } else {
    //     putString("FAIL: monday =/= monday");
    // }
}

{
    putString("*** Testing while loop ***\n");
    x: integer;
    x := 0;

    putString("Printing steps of x, from x=0 to x=10 (excl.):\n");

    while(x < 10) {
        putString("  x=");
        putInt(x);
        putString("\n");
        x := x + 1;
    }
}

{
    putString("*** Testing plusminus expression ***\n");
    if(7 = 10 +- 4) {
        putString("Works (1)\n");
    }
    else {
        putString("Fails (1)\n");
    }

    if(7 = 10 +- 2) {
        putString("Fails (2)\n");
    }
    else {
        putString("Works (2)\n");
    }

    if(13 = 10 +- 2) {
        putString("Fails (3)\n");
    }
    else {
        putString("Works (3)\n");
    }
}

{
    putString("*** Testing functions ***\n");

    function willItRun() {
        putString("success: it runs.\n");
    };

    willItRun();

    function getTwee() {
        x: integer;
        x := 10;

        return x-8;
    };

    if(2 = getTwee()) {
        putString("Works (1)\n");
    }
    else {
        putString("Fails (1)\n");
    }

    unChanged: boolean;
    unChanged := true;
    function iHaveSideEffects() {
        unChanged := false;
    };
    iHaveSideEffects();

    if(unChanged) {
        putString("Fail: it did not have side-effects\n");
    }
    else {
        putString("Success: it has side-effects\n");
    }
}

{
    putString("*** Testing user input ***\n");
    x: integer;
    putString("Please enter a number: ");
    x := getInt();
    putString("\n");
    putString("You entered: ");
    putInt(x);
    putString(".\n");

    b: boolean;
    putString("Please enter a boolean (true/false): ");
    b := getBool();
    putString("\n");
    putString("You entered: ");
    putBool(b);
    putString(".\n");

    c: character;
    putString("Please enter a character: ");
    c := getChar();
    putString("\n");
    putString("You entered: ");
    putChar(c);
    putString(".\n");

    s: string;
    putString("Please enter a string: ");
    s := getString();
    putString("\n");
    putString("You entered: ");
    putString(s);
    putString(".\n");
}

{
    putString("*** Testing universal equals ***\n");
    b1, b2: boolean := true;
    b3: boolean := false;

    if(b1 = b2) { putString("works 1\n"); } else { putString("FAILS 1\n"); }
    if(b1 =/= b3) { putString("works 2\n"); } else { putString("FAILS 2\n"); }

    if(b1 =/= b2) { putString("FAILS 3\n"); } else { putString("works 3\n"); }
    if(b1 = b3) { putString("FAILS 4\n"); } else { putString("works 4\n"); }

    s1, s2: string := "foo";
    s3: string := "foo";
    s4: string := "bar";

    if(s1 = s2) { putString("works 1\n"); } else { putString("FAILS 1\n"); }
    if(s1 = s3) { putString("works 2\n"); } else { putString("FAILS 2\n"); }
    if(s1 =/= s4) { putString("works 3\n"); } else { putString("FAILS 3\n"); }

    if(s1 =/= s2) { putString("FAILS 4\n"); } else { putString("works 4\n"); }
    if(s1 = s4) { putString("FAILS 5\n"); } else { putString("works 5\n"); }
}

{
    putString("*** Testing chain of constancy (no output) ***\n");
    x, y: integer;
    z: integer := 3;
    constant X: integer := 5;

    x := 2;
    y := x;
    z := X;

    // Nu zijn x, y en z allemaal niet constant, maar X wel.
    // constant Z: integer := z + X; // Dit mag dus niet
    constant Z: integer := (X*X) + X^(X+X); // Dit mag wel; alleen constantes gebruikt
}

putString("\n\n");
