{
    // Declare various types as constants
    constant ONE: integer := 1;
    constant ILikeIcecream: boolean := true;
    constant HELLO: string := "Hello, world!";
    constant INITIAL: character := 'B';
}

{
    constant ZERO: integer := 0;
    constant PHI: integer := 2;
    constant PI: integer := 3;
    constant MINUSTAU: integer := -6;

    // Constants can be used as expressions
    pi: integer := PI;
    pi := pi + PI;

    if( ZERO =/= PHI*PI+MINUSTAU) {
        putString("Fail! (0)");
    }

    if(! (ZERO <= PHI <= PI <= 100)) {
        putString("Fail! (1)");
    }
}

{
    constant TRUE: boolean := true;
    if(! TRUE) {
        putString("Fail! (2)");
    }

    constant FALSE: boolean := false;
    if(FALSE) {
        putString("Fail! (3)");
    }
}

{
    // This function returns a constant value.
    function getAnswerToLifeTheUniverseAndEverything() {
        return 20*2+2;
    };

    constant THEANSWER: integer := getAnswerToLifeTheUniverseAndEverything();

    if(THEANSWER =/= 42) {
        putString("Fail (4)");
    }

    // Due to the chain of constancy, we can assign a constant value with a (constant) expression
    constant FALSE: boolean := (THEANSWER =/= 42);

    if(FALSE) {
        putString("Fail! (5)");
    }
}

{
    constant PlutoIsPlanet: boolean := true;

    if(!PlutoIsPlanet) {
        putString("Fail! (6)");
    }

    {   
        // Nope: Pluto is no longer a planet :(
        constant PlutoIsPlanet: boolean := false;

        if(PlutoIsPlanet) {
            putString("Fail! (7)");
        }

        {
            // If I were in charge, Pluto would be planet for sure!
            constant PlutoIsPlanet: boolean := true;

            if(!PlutoIsPlanet) {
                putString("Fail! (8)");
            }
        }
    }
}

putString("Finished!");
