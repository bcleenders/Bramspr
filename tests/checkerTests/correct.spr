{   // Constants testing
    {
        // Declare various types as constants
        constant ONE: integer := 1;
        constant ILikeIcecream: boolean := true;
        constant HELLO: string := "Hello, world!";
        constant INITIAL: character := 'B';
    }

    {
        constant ZERO: integer := 0;
        constant PHI: integer := 2;
        constant PI: integer := 3;
        constant MINUSTAU: integer := -6;

        // Constants can be used as expressions
        pi: integer := PI;
        pi := pi + PI;

        if( ZERO =/= PHI*PI+MINUSTAU) {
            putString("Fail! (0)");
        }

        if(! (ZERO <= PHI <= PI <= 100)) {
            putString("Fail! (1)");
        }
    }

    {
        constant TRUE: boolean := true;
        if(! TRUE) {
            putString("Fail! (2)");
        }

        constant FALSE: boolean := false;
        if(FALSE) {
            putString("Fail! (3)");
        }
    }

    {
        // This function returns a constant value.
        function getAnswerToLifeTheUniverseAndEverything() {
            return 20*2+2;
        };

        constant THEANSWER: integer := getAnswerToLifeTheUniverseAndEverything();

        if(THEANSWER =/= 42) {
            putString("Fail (4)");
        }

        // Due to the chain of constancy, we can assign a constant value with a (constant) expression
        constant FALSE: boolean := (THEANSWER =/= 42);

        if(FALSE) {
            putString("Fail! (5)");
        }
    }

    {
        constant PlutoIsPlanet: boolean := true;

        if(!PlutoIsPlanet) {
            putString("Fail! (6)");
        }

        {   
            // Nope: Pluto is no longer a planet :(
            constant PlutoIsPlanet: boolean := false;

            if(PlutoIsPlanet) {
                putString("Fail! (7)");
            }

            {
                // If I were in charge, Pluto would be planet for sure!
                constant PlutoIsPlanet: boolean := true;

                if(!PlutoIsPlanet) {
                    putString("Fail! (8)");
                }
            }
        }
    }

    putString("Finished!");
}

{   // Enumerations testing
    enumeration day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY };
    enumeration color { RED, WHITE, BLUE };

    // Naming conflicts!
    type color {
        R: integer,
        B: integer,
        G: integer
    };

    d : day;
    c : enumeration.color;

    // This still works
    c := color.RED;

    // More collisions: variable <-> enum collision!
    day : integer := 6;

    // Now we have to explicitly refer to the enum
    d := enumeration.day.TUESDAY;
}

{   // Testing the if structure
    b0:boolean := 2^10 = 1024; // true
    b1:boolean := 2^0 <= 2^1 <= 2^2 <= 2^3 <= 2^4;

    if(true) {
        putString("Success (0)\n");
    } else {
        putString("Fail (0)\n");
    }

    if(b0 & b1) {
        putString("Success (1)\n");
    } else {
        putString("Fail (1)\n");
    }

    if(b0 & b1) {
        putString("Success (2)\n");
        if(b0 & b1) {
            putString("Success (3)\n");
        } else {
            putString("Fail (3)\n");
        }
    } else {
        putString("Fail (2)\n");
    }
}

{   // To finish it; a small example program:
    enumeration StoelModellen{
        LIGSTOEL,
        BUREAUSTOEL,
        KRUK,
        MASSAGESTOEL
    };

    type Stoel{
        model: StoelModellen,
        prijs: integer,
        zitLekker: boolean
    };

    type Bibliotheek{
        stoelen: [3]Stoel,
        nuOpen: boolean
    };

    ikZitLekker, jijZitLekker: boolean := 
        Bibliotheek{stoelen := [
                Stoel{
                        model := StoelModellen.KRUK,
                        prijs := 10,
                        zitLekker := false
                },
                
                Stoel{
                        model := StoelModellen.BUREAUSTOEL,
                        prijs := 700,
                        zitLekker := true
                },
                
                Stoel{
                        model := StoelModellen.MASSAGESTOEL,
                        prijs := 250,
                        zitLekker := true
                }   
            ],
            nuOpen := false
        }.stoelen[2].zitLekker;

    s: Stoel := Stoel{
        model := StoelModellen.BUREAUSTOEL,
        prijs := 700,
        zitLekker := true
    };

    function foo() {
        return Bibliotheek{ stoelen := [s, s, s], nuOpen := false };
    };

    x: boolean := foo().nuOpen;
}